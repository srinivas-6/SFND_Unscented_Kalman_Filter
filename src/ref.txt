VectorXd z_ = meas_package.raw_measurements_;

   int n_z_ = 3;
   MatrixXd Zsig = MatrixXd(n_z_, 2*n_aug_+1);

   for(int i = 0; i < 2 * n_aug_ + 1; i++){
     double p_x = Xsig_pred_(0, i);
     double p_y = Xsig_pred_(1, i);
     double v = Xsig_pred_(2, i);
     double yaw = Xsig_pred_(3, i);
     double yawd = Xsig_pred_(4, i);

     double vx = cos(yaw)*v;
     double vy = sin(yaw)*v;

     Zsig(0, i) = sqrt(p_x*p_x + p_y*p_y);                      // r
     Zsig(1, i) = atan2(p_y, p_x);                              // phi
     Zsig(2, i) = (p_x*vx + p_y*vy)/(sqrt(p_x*p_x + p_y*p_y));  // r_dot
   }

   // calculate mean predicted measurement
   VectorXd z_pred_ = VectorXd(n_z_);
   z_pred_.fill(0.0);
   for(int i = 0; i < 2*n_aug_+1; i++){
     z_pred_ = z_pred_ + weights_(i)*Zsig.col(i);
   }
   // calculate covariance of predicted measurement
   MatrixXd S = MatrixXd(n_z_, n_z_);
   S.fill(0.0);
   for(int i = 0; i < 2*n_aug_+1; i++){
     VectorXd z_diff = Zsig.col(i) - z_pred_;

     while(z_diff(1) > M_PI) z_diff(1) -= 2.*M_PI;
     while(z_diff(1) < -M_PI) z_diff(1) += 2.*M_PI;

     S = S + weights_(i) * z_diff * z_diff.transpose();
   }

   // add measurement noise covariance matrix
   S = S + R_radar_;

   // UKF update
   // Cross correlation matrixc between sigma points in state space
   // and measurement space
   MatrixXd Tc = MatrixXd(n_x_, n_z_);
   Tc.fill(0.0);
   for(int i = 0; i < 2*n_aug_+1; i++){
     VectorXd x_diff = Xsig_pred_.col(i) - x_;
     while(x_diff(3) > M_PI) x_diff(3) -= 2.*M_PI;
     while(x_diff(3) < -M_PI) x_diff(3) += 2.*M_PI;

     VectorXd z_diff = Zsig.col(i) - z_pred_;
     while(z_diff(1) > M_PI) z_diff(1) -= 2.*M_PI;
     while(z_diff(1) < -M_PI) z_diff(1) += 2.*M_PI;

     Tc = Tc + weights_(i) * x_diff * z_diff.transpose();
   }

   // calculate Kalman gain K
   MatrixXd K = Tc * S.inverse();

   // update state mean and covariance
   // residual
   VectorXd z_diff = z_ - z_pred_;
   while(z_diff(1) > M_PI) z_diff(1) -= 2.*M_PI;
   while(z_diff(1) < -M_PI) z_diff(1) += 2.*M_PI;

   x_ = x_ + K*z_diff;

   P_ = P_ - K*S*K.transpose();

   //calculate NIS
   NIS_rad = z_diff.transpose() * S.inverse() * z_diff;

}